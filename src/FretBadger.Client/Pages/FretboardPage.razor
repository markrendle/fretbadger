@page "/fretboard/{tuning}"
@page "/fretboard/{tuning}/scale/{scales}"
@page "/fretboard/{tuning}/mode/{modes}"
@page "/fretboard/{tuning}/arpeggio/{arpeggios}"
@page "/fretboard/{tuning}/note/{notes}"
@using FretBadger.Client.Services
@using FretBadger.Music.NoteTypes
@using Fretboard = FretBadger.Fretboards.Fretboard
@rendermode InteractiveWebAssembly

@foreach (var model in Models)
{
    <FretboardContainer Model="model"></FretboardContainer>
}

@code {
    [Parameter] public string? Tuning { get; set; }
    [Parameter] public string? Scales { get; set; }
    [Parameter] public string? Modes { get; set; }
    [Parameter] public string? Arpeggios { get; set; }
    [Parameter] public string? Notes { get; set; }

    private string? Alert { get; set; }

    private List<FretboardViewModel> Models { get; } = new();

    protected override void OnInitialized()
    {
        if (Tuning is { Length: > 0 })
        {
            Note[] notes;
            try
            {
                notes = Tunings.Parse(Tuning);
            }
            catch (MusicException)
            {
                Alert = "Invalid note";
                return;
            }

            var fretboard = Fretboard.Create(12, notes);
            var viewModel = new FretboardViewModel(fretboard, [], "default", Tuning);

            if (Scales is { Length: > 0 })
            {
                ApplyScales(viewModel, Scales);
            }

            Models.Add(viewModel);
        }
    }

    private void ApplyScales(FretboardViewModel viewModel, string scales)
    {
        var scaleId = scales.Split('+').First();
        var scaleSetId = scaleId.Split('-')[1];
        var scaleSet = Music.Scales.FindById(scaleSetId);
        if (scaleSet is null) return;
        if (Note.TryParse(scaleId.Split('-')[0], out var note))
        {
            var scale = scaleSet!.Get(note);
            foreach (var fretboardFret in viewModel.Fretboard.Frets)
            {
                foreach (var fretString in fretboardFret.Strings)
                {
                    if (fretString.Note == note)
                    {
                        fretString.IsRoot = true;
                    }
                    else if (scale.AsSpan().Contains(fretString.Note))
                    {
                        fretString.Badge = fretString.Note.Display;
                    }
                    else
                    {
                        fretString.Badge = string.Empty;
                    }
                }
            }
        }
    }

    private void ApplyModes(FretboardViewModel viewModel, string modes)
    {
        var modeId = modes!.Split('+').First();
        var scaleSetId = modeId.Split('-')[1];
        var scaleSet = Music.Scales.FindById(scaleSetId);
        if (Note.TryParse(modeId.Split('-')[0], out var note))
        {
            var scale = scaleSet!.Get(note);
            foreach (var fretboardFret in viewModel.Fretboard.Frets)
            {
                foreach (var fretString in fretboardFret.Strings)
                {
                    if (fretString.Note == note)
                    {
                        fretString.IsRoot = true;
                    }
                    else if (scale.AsSpan().Contains(fretString.Note))
                    {
                        fretString.Badge = fretString.Note.Display;
                    }
                    else
                    {
                        fretString.Badge = string.Empty;
                    }
                }
            }
        }
    }

}